SchemaCrawler http://schemacrawler.sourceforge.net/ - db meta access
jOOQ http://www.jooq.org
http://ikaisays.com/2011/11/01/getting-started-with-jooq-a-tutorial/
Querydsl http://www.querydsl.com/
http://www.springfuse.com/, Celerio - code generator tool http://www.jaxio.com/en/celerio.html
Liquibase - database changes
Lucene - полнотекствый поиск

hibernate JdbcServicesImpl


 dbsupport - только модель базы данных, диалекты и прочая специфика
 dao - работа с конкретным соединением
 service - утилитарный слой
 entity - сущности приложения как таковые

 EntityManager или имплемент JPA
 Criterias, etc



 http://www.springbyexample.org/examples/spring-data-jpa.html
 http://docs.jboss.org/hibernate/entitymanager/3.6/reference/en/html_single/
http://gordondickens.com/wordpress/2011/08/01/simpler-jpa-with-spring-data-jpa/
http://docs.oracle.com/javaee/6/tutorial/doc/gjivm.html

 ZK: http://habrahabr.ru/post/129189/


 Automated Business Logic http://www.automatedbusinesslogic.com/downloads-1



// see http://www.manydesigns.com/en/blog/configuring-hibernate-programmatically logical model

1. Build ServiceRegistry instance
2. MetadataSources metadataSources = new MetadataSources(serviceRegistry);
    2.1 metadataSources.metadataBuilder = new MetadataBuilderImpl( this );
3. Configure metadataSources sources (hbm, annotations, etc)
4. Metadata metadata = metadataSources.buildMetadata();
    4.1 metadataSources.getMetadataBuilder().buildMetadata();
        4.1.1 metadataSources.metadataBuilder: new MetadataImpl( sources, options );
5. sessionFactory = metadata.buildSessionFactory();




2013-03-01
1. у TableMeta в специальном поле описываем тип привязки:
  1.1 map - instance динамический map
  1.2 class - instance будет какой-то неаннотированный класс (т.е. он будет привязан через MetaMappingBinder)
  1.3 mapped class - instance будет аннотированный класс, который добавиться в mapping-annotations classes для конфига,
  при этом сам TableMeta будет помечен как shadow и все данные заново проинициализованы из аннотаций
  TableMeta может быть снят флаг shadow - тогда класс будет map

  Meta таблицы также есть в списке TableMeta - но помеченные как shadow (final) - т.е. они всегда определяются из своих аннотированных классов.

  Генератор кода

2. можно дополнительно описывать какие-то маппинги руками в конфиге (hbm или аннотированные классы),
 они также переопределяеют TableMeta при наличии такого-же (shadow, readonly), но без возможности снятия флага shadow
 ? - чтобы можно было ссылаться на такой класс, нужно или отменить FK check (останется только имя таблицы/поля) или хранить их в БД как transient

3. TableMeta источник данных - view,sql,hql - список полей заполнятся динамически. read-only.
Можно описать insert,update,delete - тогда не read-only

4. DataSource - (может п.2 перенести на уровень datasource) - описывает источник данных (на основании какой-то таблицы) и список полей.
...

5. Генераторы
 для поля можно указать генератор - имя класс которое его генерит при создании нового(action -create/update обрабатывается на уровне генератора).
 По умолчанию с списке все генераторы на уровне classpath наследники интерфейса IGenerator.
 В т.ч. все hibernate генераторы (сделать бриджи).
 Генератор может использоваться не только для id.

6. DAO access слой для любых entity.

7. Несколько datasource/sessionFactory - можно подключать несколько источником данных. -> Слабые (без FK) и сильные (с FK) ссылки для связей между источниками данных.
Для каждого источника данных прописыается набор TableMeta за которые он ответственных.
TableMeta шарится на все приложение.


8. Подумать над представлением TableMeta - как хранить FK (их hibernate генерит сам), см. MetaMappingBinder foreign-key.
Может все хранить в одном списке (колонки, связи, ключи, и т.д.) - как в hbm?

9. Meta general - описывает вообще все источники данных (DD_TABLE как из БД, веб-сервисы, xml, json, файлы)
для каждого вида источника - свои таблицы, поддержка несколько разных БД
не хранится в БД - только в файле, все допустимые БД тоже из файла
заполняется в рантайм

10. Keep in mind: all binder method needs to be reviewed from time to time
sync Binder and DMBinder


2013-03-07 TODO
 add Properties to *Meta classes: persist as string but will be parsed in runtime
 support all custom properties in TODOs from this field


2013-03-14
   !!!! Metamodel ignores dynamic-map-entity mode,
   при создании createEntityPersister
   DatabaseModelMetadataImpl.makeClassReference(final String className)
    className = null always
ожидается в версии 5.0
   переписать через маппинги


2013-03-18 TODO after new hacks integrated!
EntityMetamodel:388
instrumentationMetadata = Environment.getBytecodeProvider().getEntityInstrumentationMetadata( mappedClass );
mappedClass = null;!

used by SingleTableEntityPersister, constructor with EntityBinding
used by PersisterFactoryImpl 151 line
used by SessionFactoryImpl:773 - point to provide my own PersisterFactoryImpl?


org.hibernate.MappingException: Could not instantiate persister org.hibernate.persister.entity.SingleTableEntityPersister
	at org.hibernate.persister.internal.PersisterFactoryImpl.create(PersisterFactoryImpl.java:174)
	at org.hibernate.persister.internal.PersisterFactoryImpl.createEntityPersister(PersisterFactoryImpl.java:148)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:773)
	at com.hutgin2.inject.hibernate.hack.DMMetadataImpl$SessionFactoryBuilderImpl.buildSessionFactory(DMMetadataImpl.java:573)
	at com.hutgin2.inject.hibernate.hack.DMMetadataImpl.buildSessionFactory(DMMetadataImpl.java:288)
	at com.hutgin2.inject.hibernate.EntitySessionFactory.initWithDatabaseModelSourceProcessor(EntitySessionFactory.java:115)
	at com.hutgin2.dao.hibernate.EntitySessionFactoryTest.testGetSessionFactoryWithDMSourceProcessor(EntitySessionFactoryTest.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)
Caused by: java.lang.NullPointerException
	at org.hibernate.tuple.entity.EntityMetamodel.<init>(EntityMetamodel.java:386)


or build using mappings? (from Metamodel?)



http://docs.jboss.org/hibernate/orm/4.2/manual/en-US/html/ch05.html#mapping-declaration-id


2013-04-01
Transaction manager
main session requires transaction manager - using xml-configuraton it can be configured only once - at loading and it requires sessionFactory
due that sessionFactory is reinitializable, we can't using xml-based config,
only if make main sessionfactory as @Configured @Bean - means that to apply new setting it's neccessary to restart application.
Or it can be reconfigured? Check this!
http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/beans.html#beans-factory-class-instance-factory-method

http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html#transaction-programmatic-ptm
http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html#tx-multiple-tx-mgrs-with-attransactional
http://stackoverflow.com/questions/4423125/spring-is-it-possible-to-use-multiple-transaction-managers-in-the-same-applica


-- metamodel - retrieve all metamodel despite lazy, etc
-+ generic dao implementation

-- $type$=Employee in hash map!